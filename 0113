### Git 기초 ###

---

#### Git 초기화

```
$ git init
```

- 현재 디렉토리를 Git으로 관리하겠다는 명령어
- `.git`이라는 숨긴폴더가 생성된다.
- 터미널에 `(master)`가 표시된다.

!주의!

- 절대 홈 디렉토리에서 홈 디렉토리(`~`) 에서 `init`을 실행하지 않는다.
- 이미 Git에 의해 관리되는 폴더 내부에서 다시 `init`을 실행하지 않는다.



#### git add

```
$ git add a.txt
$ git add my_folder
$ git add my_folder/a.txt

# 모든 파일들을 등록
$ git add .
```

- working directory의 파일을 staging area에 등록
- 등록된 파일을 Git 이 추적 관리한다.
- 내용 수정하면 수정 된 내용은 working directory에 있음
- 변경 후 git add를 해줘야 staging area로 이동



#### git status

```
$ git status
```

- working directory와 staging area에 있는 파일의 현재 상태를 알려주는 명령어
- 어떤 작업을 하기 전에 수시로 status 를 확인하는 습관을 가지자!
- 파일의 상태
  - untracked : Git이 관리하지 않는 파일들(한번도 staging area에 등록되지 않은 파일들)
  - tracked : Git이 관리하는 파일




#### 사용자 정보 설정

```
$ git config --global user.name '<사용자 이름>'
$ git config --global user.email '<사용자 메일>'
```
- 이름과 이메일 적어야 커밋 가능.
- `~/. gitconfig` 파일에 저장됩니다.

```
$ git config --global --list
```

- `.gitconfig` 의 내용을 출력



#### git commit

```
$ git commit
# 커밋 메시지 작성을 위해 vim 에디터가 오픈

$ git commit -m '커밋 메시지'
```

- Staging area에 등록된 파일의 변경 사항을 하나의 버전(커밋)으로 저장하는 명령어
- `커밋 메시지` 를 작성해야 된다.
  - 변경사항을 잘 표현할 수 있도록 의미있게 작성한다.


- 최초 커밋 시에는 (root-commit) 이 출력



#### git log

```
$ git log
$ git log --oneline
```

- 현재까지 commit 들의 정보를 표시



#### 로컬 저장소

- 작업 공간(working directory / working tree) : 사용자의 일반적인 작업을 하는 공간
- 스테이지(staging area) : 커밋이 될 파일/폴더들이 등록되는 곳 
- 저장소(commits) : staging area 파일들의 변경사항들이 저장되는 곳



#### 원격저장소 등록

```
$ git remote add origin https://github.com/rladmsrb/TIL.git
```



#### 원격저장소 정보 조회

```
$ git remote -v
```



#### git push

````
# origin 이라는 이름의 원격저장소의 master 브랜치에 push하기
$ git push origin master

# -u 옵션을 사용한 후에는 저장소 이름(origin), 브랜치 이름(master)를 생략 가능함
$ git push -u origin master
# 그 이후부터는
$ git push
````

---

#### .gitignore

- 특정 파일 혹은 폴더에 대해 Git 이 버전 관리를 하지 않도록 설정



#### .gitignore 에 작성하는 내용들

- 민감한 개인정보가 담긴 파일(전화번호, 각종 비밀번호, API KEY 등)
- 운영체제에서 사용되는 파일들
- IDE(통합개발환경) 혹은 Text 에디터 등에서 활용하는 파일
  - pycharm -> .idea 폴더
- 개발 언어 / 프레임워크에서 사용되는 파일
  - python 가상환경

#### 주의 사항

- 반드시 파일 이름을 `.gitignore` 로 작성
- `.gitignore` 위치는 `.git` 과 동일한 폴더에 존재
- 제외하고 싶은 파일들을 `add` 하기 전에 `.gitignore` 에 작성

#### .gitignore 쉽게 작성하기

- [https://www.toptal.com/developers/gitignore](gitignore 쉽게)



---



#### 원격 저장소 가져오기

- 지금까지는 로컬 저장소 ----> 원격 저장소 학습
- 원격 저장소 ----> 로컬 저장소



#### git clone

- 원격 저장소의 커밋 내역을 모두 가져와서, 로컬 저장소에 생성

```
$ git clone <원격 저장소 주소>
$ git clone <원격 저장소 주소> <폴더이름>
$ git clone <원격 저장소 주소> .
```

- git clone 을 하게되면 `git init` 과 `git remote add` 가 이미 수행된 상태다.

#### 

#### git pull

- 원격 저장소의 변경 사항을 가져와서 로컬 저장소에 반영(업데이트)

```
$ git pull origin master 
```



- TIL-HOME 에서 pull 이 아니라 commit 을 먼저한 후 pull을 하면 어떻게 될까?

1. 강의장과 집에서 서로 다른 파일을 수정한 경우는 정상적으로 pull이 실행

2. 강의장과 집에서 같은 파일의 다른 라인을 수정한 경우는 정상적으로 pull이 실행

3. 강의장과 집에서 같은 파일의 같은 라인을 수정한 경우는 충돌(conflict) 발생

   - 내가 직접 수정해야 된다.
   - 수정한 것을 add/commit 한다.

   

---

#### Branch

- 브랜치 목록 출력

git branch

- 브랜치 생성

  git branch <브랜치이름>

- 브랜치 변경

  git switch <브랜치이름>

- 브랜치 병합

  - 기준이 되는 branch로 이동해서 병합을 수행
  - git merge <브랜치이름>

- 브랜치 삭제

git branch -d <브랜치이름>

- git log 옵션
  - --all : 모든 커밋 보기
  - --graph : 그래프 모양으로 출력
  - --oneline : 한 줄 요약 보기

  